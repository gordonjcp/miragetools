-- Ensoniq Mirage ROM disassembly
-- Main f9dasm file
-- disassemble with "./f9dasm mirage-rom.lbl"

file "./miragerom.bin" f000
option nohex
-- option noaddr
option noasc

setdp e8

include "./mirage-peripherals.lbl"
include "./mos32-var8k.lbl"

label 8008 irq_handler
label 800b firq_handler
label 800e osentry

-- unused blocks
unused f615-f6dc
unused f6f4-f77c
unused fcb7-ffef

-- data blocks
data f77d-fb4c

label fb4d ledpatterns
comm fb4d led display patterns for hexadecimal 0-f
comm fb5d more led display patterns: l n o p r u _ - [top bar] c u
data fb4d-fb67

label fb68 permutations
comm fb68 "fascinating permutation of values from 0 to 23, no idea why"
data fb68-fb7f

comm fb80 Track/sector for OS load
label trksec_os
data fb80-fb87

comm fb88 Track/sector for System Params
label trksec_sysprm
data fb88-fb8b

comm fb8c Track/sector for OS flags
data fb8c-fb8f

comm fb90 Track/sector for lower sounds
data fb90-fb9b

comm fb9c Track/sector for upper sounds
data fb9c-fba7

comm fba8 Track/sector for short sequences
data fba8-fbc7

comm fbc8 Track/sector for long sequences
data fbc8-fbd3

comm fbd4 Something to do with directory bytes, apparently
comm fbd4 a bunch of stuff in here looks like a curve table
data fbd4-fc7e


-- vectors
word fff0-ffff
label fff0 reserved_vector
label fff2 SWI3_vector
label fff4 SWI2_vector
label fff6 firq_vector
label fff8 irq_vector
label fffa swi_vector
label fffc nmi_vector
label fffe reset_vector

-- labels for subroutines
label f000 fdcreadsector
label f00c fdcrdsec1
comm f000 Read sector from current track
comm f000 sector in fdcsect, buffer address in X register
comm f000 terminates on NMI

label f013 fdcskipsector
label f01f fdcskpsec1
comm f013 Read just one byte from the sector on the current track
comm f013 sector in fdcsect, buffer address in X register
comm f013 possibly used for directory byte CHECKME

label f024 fdcwritesector
label f030 fcdwrsec1
comm f024 Write sector to disk
comm f024 Sector in fdcsect, buffer address in X register

label f037 fdcfillsector
label f043 fdcflsec1
comm f037 Fill sector with single byte (directory byte? CHECKME)
comm f037 Sector in fdcsect, buffer address in X register

label f04a fdcreadtrack
label f051 fdcrdtrk1
comm f04a Read entire track from disk
comm f04a Buffer address in X register

label f058 fdcwritetrack
label f05f fdcwrtrk1
comm f058 Write entire track to disk
comm f058 Buffer address in X register

label f066 fdcrestore
label f06d fdcrestore1
comm f066 Return drive head to track 0

label f06f fdcseektrack
label f07b fdcseektrk1
comm f06f Step drive head to track
comm f06f Track number in fdctrk

label f07d fdcseekin
label f082 fdcseekin1
comm f07d Step head in one track

label f086 fdcseekout
label f08d fdcseekout1
comm f087 Step head out one track

label f08f fdcforceint
label f096 fdcforce1
comm f08f Force FDC interrupt
comm f08f Reset the FDC and cancel any pending commands

label f0a7 countdown
comm f0a7 Delay loop, count in Y register
comm f0a7 15 clocks per loop

label f0b0 nmivec
label f0c5 nmivec1
label f0cf nmivec2
label f0dd nmivec3
label f0e7 nmivec4
label f0ef nmiend
comm f0b0 NMI vector handler
comm f0b0 When a disk command is finished, the FDC asserts NMI
comm f0b0 and breaks the infinite loop in the command routine
lcomm f0b0 Reset stack, discarding saved registers
lcomm f0b2 read FDC status register
lcomm f0b4 ... and save it in fdcstat system variable
lcomm f0ba If we were doing a Read Sector command...
lcomm f0c1 ... or a Write Sector command...
lcomm f0c3 (we weren't, skip ahead)
lcomm f0c5 ... then get the FDC status
lcomm f0c8 Mask off all except WP, RNF, CRC and LD
lcomm f0ca Save status in fdcstat system variable
lcomm f0d2 If we were doing a Read Track command...
lcomm f0d9 ... or a Write Track command...
lcomm f0db (we weren't, skip ahead)
lcomm f0dd ... then get the FDC status
lcomm f0e0 Mask off all except WP, RNF, CRC and LD
lcomm f0e2 Save status in fdcstat system variable
lcomm f0ea All that's left are seek commands, save SE and CRC
lcomm f0ec Save status in fdcstat system variable

comm f0f0 *** end of disk routines

label f0f0 coldstart
label f0ff cold1
label f110 cold2
label f12f cold3
label f131 cold4
label f13f cold5
lcomm f0f0 disable interrupts
lcomm f0f4 Set VIA ddrb pin mode
lcomm f0f9 FD motor off, RAM bank 0
comm f0fc Zero out VCF chip sample-and-holds
lcomm f109 System stack pointer
lcomm f11b Disk in drive?
lcomm f139 error code = "nd"
lcomm f142 check for FDC errors
lcomm f144 if fdcstat is non-zero try again to boot
comm f146 otherwise fall through and run OS in RAM
label f146 runopsys
lcomm f14b SET, T2, CB2, SR interrupts
bin f14c
lcomm f150 Enable RX interrupt, 8n1, x16 prescaler
bin f151
lcomm f155 Floppy off
lcomm f15a RAM OS entry point

comm f15d Initialise VIA, DOC and ACIA
label f15d hwsetup
lcomm f15d DP register points to FDC
lcomm f166 disable all VIA interrupts
lcomm f169 T1 generates pulse on PB7, shift in on ext clock
bin f16a
lcomm f169 PB7 drives the UART clock
lcomm f169 Shift register is used for the keyboard interface
lcomm f16f CB2 in/fall, CA1 fall, CA2 high
bin f170
lcomm f178 FD motor off
bin f179
lcomm f189 preset VIA T2, 2MHz/5000
lcomm f194 reset DOC by writing $ff to the enable reg
lcomm f197 zero out DOC registers
label f19a hwsetup1
lcomm f1a4 ACIA master reset
lcomm f1b7 "set flag for os load" CHECKME

comm f1bb Initialise DOC chip
comm f1bb (referred to as Q Chip in some documents)

label f1bb qchipsetup
label f1be qchip1
label f1ca qchip2
label f1d5 qchip3

comm f1e5 Clear sample RAM with $7f
label f1e5 clearram
label f1e8 clearram1
label f1f6 clearram2
lcomm f1e5 bank counter
lcomm f1e8 get the bank counter
lcomm f1eb or with contents of VIA port B
lcomm f1ee select appropriate bank
lcomm is there a bug here?  Looks like it would never clear bank 2
lcomm f207 all banks done, reset to bank 0

comm f20d Load OS into $8000
label f20d loadopsys



comm f306 Check for disk error code (param 98)
comm f306 flash appropriate error message if nonzero
label f306 checkos
label f315 checkos1
label f321 checkos2
label f32b checkos3
label f33c showerrcode
lcomm f30d 1 = "dE"
lcomm f319 6 = "ud"
lcomm f325 7 = "nd"

lcomm f33c holds 16-bit message data
lcomm f34d check for 1 bits in data
lcomm f373 multiplexed two segments at a time
lcomm f37c pause
lcomm f384 next bit position

comm f3f1 Move FD head to track, with retry
label f3f1 gototrack
label f3f6 gototrack1
label f412 gototrackend
lcomm f400 move head to home if seek failed
lcomm f403 retry count
lcomm f406 try again

comm f413 Set FDC error code (param 98)
comm f413 based on saved previous error code
label f413 seterrcode

comm f4c6 start disk motor and enable
label f4c6 enablefd

comm f4d6 stop disk motor and disable
label disablefd



comm fc7f Reset Handler
comm fc7f checks for cartridge, jumps to coldstart if not present
label fc7f reset_handler
label fc8e reset1

comm fc91 OS Panic handler
comm fc91 Flashes ".O.S" on the display then reboots
label fc91 ospanic
lcomm fc9b erroneous label, here - that's a constant


const fdb7
